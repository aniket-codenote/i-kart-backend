generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  phone     String    @unique
  username  String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  roleId    Int
  role      Role      @relation(fields: [roleId], references: [id])
  catalogs  Catalog[]
  products  Product[]
  stores    Store[]
  otps      Otp[]
  token     String?   @unique
  
  @@index([roleId])
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
}

model Product {
  id            Int      @id @default(autoincrement())
  userId        Int
  catalogId     Int
  name          String?
  description   String?
  priceCents    Int      @default(0)
  priceCurrency String   @default("USD")
  slug          String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id])
  catalog         Catalog          @relation(fields: [catalogId], references: [id])
  productVariants ProductVariant[]
  storeProducts   StoreProduct[]
  productImages   ProductImage[]

  @@index([userId])
}

model Catalog {
  id             Int            @id @default(autoincrement())
  name           String?
  status         String         @default("draft")
  userId         Int
  categoryId     Int
  user           User           @relation(fields: [userId], references: [id])
  category       Category       @relation(fields: [categoryId], references: [id])

  products        Product[]
  catalogImages   CatalogImage[]
  catalogVariants CatalogVariant[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  altText   String?
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CatalogImage {
  id        Int      @id @default(autoincrement())
  url       String
  altText   String?
  catalog   Catalog  @relation(fields: [catalogId], references: [id], onDelete: Cascade)
  catalogId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  catalogs  Catalog[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Store {
  id        Int            @id @default(autoincrement())
  name      String?        @unique
  slug      String?        @unique
  logo      String?
  banner    String?
  userId    Int
  user      User           @relation(fields: [userId], references: [id])
  products  StoreProduct[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model StoreProduct {
  id        Int      @id @default(autoincrement())
  storeId   Int
  productId Int
  store     Store    @relation(fields: [storeId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, productId])
}

model ProductVariant {
  id           Int      @id @default(autoincrement())
  productId    Int
  optionName   String
  optionValues String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, optionName])
}

model Otp {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model CatalogVariant {
  id           Int      @id @default(autoincrement())
  catalogId    Int
  optionName   String
  optionValues String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  catalog Catalog @relation(fields: [catalogId], references: [id])

  @@unique([catalogId, optionName])
}
